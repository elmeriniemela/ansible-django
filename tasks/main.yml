---

- name: "Add django system user"
  tags: django
  user:
    name: "{{ websites_user }}"
    comment: Django sys user
    shell: /bin/bash
    home: "{{ websites_home_dir }}"

- name: Create logging directory for django applications and uwsgi
  tags: django
  become_user: "{{ websites_user }}"
  file:
    path: "{{ websites_home_dir }}/log"
    state: directory


- name: "Add default nginx conf file django apps"
  tags: django
  template:
    src: default-nginx.conf
    dest: "/etc/nginx/sites-available/default"
    force: true
    owner: root
    group: root
    mode: 0644
  notify: reload nginx


- name: "Add nginx conf file django apps"
  tags: django
  template:
    src: django-nginx.conf
    dest: "/etc/nginx/sites-enabled/{{ item.sub_domain }}.{{ item.main_domain }}.conf"
    force: true
    owner: root
    group: root
    mode: 0644
  notify: reload nginx
  with_items: "{{ websites }}"

- name: Install websites from github.
  become_user: "{{ websites_user }}"
  tags: django
  git:
    repo: "{{ item.repo_https_base_url }}/{{ item.repo_name }}.git"
    dest: "{{ websites_home_dir }}/{{ item.repo_name }}"
    version: master
    force: yes
    recursive: yes
  with_items: "{{ websites }}"
  register: git_finished



- name: "Install dependency apt packages"
  tags: django
  apt:
    pkg:
      - python3-pip
      - python3-dev
      - build-essential
      - libssl-dev
      - libffi-dev
      - python3-setuptools
      - python3-venv
      - libpq-dev
    state: present


- name: Install virtualenv via pip
  tags: django
  pip:
    name: virtualenv
    executable: pip3

- name: "Install website python requirements from requirements.txt"
  tags: django
  become_user: "{{ websites_user }}"
  pip:
    requirements: "{{ websites_home_dir }}/{{ item.repo_name }}/requirements.txt"
    state: forcereinstall
    virtualenv: "{{ venv_path }}"
    virtualenv_python: /usr/bin/python3.6
  with_items: "{{ websites }}"

- name: Config file for django websites
  tags: django
  template:
    src: "config.json"
    dest: "{{ websites_home_dir }}/{{ item.repo_name }}/"
    owner: "{{ websites_user }}"
    group: "{{ websites_user }}"
  with_items: "{{ websites }}"

- name: Django manage.py migrate
  tags: django
  become_user: "{{ websites_user }}"
  command: "{{ venv_path }}/bin/python {{ websites_home_dir }}/{{ item.repo_name }}/manage.py migrate"
  register: result
  changed_when:
    - '"No migrations to apply." not in result.stdout'
  with_items: "{{ websites }}"

- name: Django manage.py collectstatic --noinput
  tags: django
  become_user: "{{ websites_user }}"
  command: "{{ venv_path }}/bin/python {{ websites_home_dir }}/{{ item.repo_name }}/manage.py collectstatic --noinput"
  register: collectstatic_result
  changed_when:
    - 'collectstatic_result.stdout_lines[-1].startswith("0 static files copied") == False or "unmodified" not in collectstatic_result.stdout'
  with_items: "{{ websites }}"

- name: Django manage.py check --deploy (Check that security settings are OK)
  tags: django
  become_user: "{{ websites_user }}"
  command: "{{ venv_path }}/bin/python {{ websites_home_dir }}/{{ item.repo_name }}/manage.py check --deploy"
  register: result
  failed_when:
    - '"System check identified no issues (0 silenced)." not in result.stdout'
  changed_when:
    - 'False == True'
  with_items: "{{ websites }}"

- name: "Add uwsgi.ini file django apps"
  tags: django
  template:
    src: uwsgi.ini
    dest: "{{ websites_home_dir }}/{{ item.repo_name }}.ini"
    force: true
    owner: "{{ websites_user }}"
    group: "{{ websites_user }}"
    mode: 0644
  with_items: "{{ websites }}"

- name: Creating a systemd Unit File for uWSGI
  tags: django
  template:
    src: "django-website.service"
    dest: "/etc/systemd/system/{{ item.repo_name }}.service"
    owner: root
    group: root
    mode: 0644
  register: systemd_result
  with_items: "{{ websites }}"

- name: Run daemon-reload before doing any other operations
  tags: django
  systemd:
    daemon_reload: yes

- name: Enable uWSGI service
  tags: django
  service:
    name: "{{ item.repo_name }}"
    enabled: yes
    state: restarted
  with_items: "{{ websites }}"
